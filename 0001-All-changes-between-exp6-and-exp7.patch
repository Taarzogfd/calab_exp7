From a694f8c1ea9f4c9e46db17206f53c5eb46a3726f Mon Sep 17 00:00:00 2001
From: jason <jason14591@outlook.com>
Date: Mon, 12 Sep 2022 21:33:53 +0800
Subject: [PATCH] All changes between exp6 and exp7

---
 myCPU/mycpu_AM.v  |  56 ++++++++
 myCPU/mycpu_EX.v  |  65 +++++++++
 myCPU/mycpu_ID.v  | 271 +++++++++++++++++++++++++++++++++++
 myCPU/mycpu_IF.v  |  52 +++++++
 myCPU/mycpu_WB.v  |  46 ++++++
 myCPU/mycpu_top.v | 352 ++++++++++++++--------------------------------
 6 files changed, 593 insertions(+), 249 deletions(-)
 create mode 100644 myCPU/mycpu_AM.v
 create mode 100644 myCPU/mycpu_EX.v
 create mode 100644 myCPU/mycpu_ID.v
 create mode 100644 myCPU/mycpu_IF.v
 create mode 100644 myCPU/mycpu_WB.v

diff --git a/myCPU/mycpu_AM.v b/myCPU/mycpu_AM.v
new file mode 100644
index 0000000..f9836d0
--- /dev/null
+++ b/myCPU/mycpu_AM.v
@@ -0,0 +1,56 @@
+module stage_4_AM (
+    input  wire clk,
+    input  wire reset,
+
+    // valid / allow
+    input  wire valid_3,
+    output wire allow_4,
+    output reg  valid_4,
+    input  wire allow_5,
+
+    input wire [38:0]  stage_3_to_4,
+    input wire [31:0] alu_result,
+    input wire [31:0] data_sram_rdata,
+    output wire [69:0] stage_4_to_5
+);
+
+wire [31:0] pc;
+
+always @(posedge clk ) begin
+    if (reset) valid_4<=1'b1;
+    else valid_4<=valid_3;
+end
+
+assign allow_4=1'b1;
+
+wire res_from_mem;
+
+wire rf_we;
+wire [4:0] dest;
+
+wire [31:0] mem_result;
+wire [31:0] final_result;
+
+
+reg [31:0] alu_result_reg;
+reg [38:0] upstream_input;
+
+always @(posedge clk ) begin
+    if (reset) alu_result_reg<=39'b0;
+    else if (valid_3 && allow_4) alu_result_reg<=alu_result;
+end
+
+always @(posedge clk ) begin
+    if (reset) upstream_input<=39'b0;
+    else if (valid_3 && allow_4) upstream_input<=stage_3_to_4;
+end
+
+
+assign mem_result   = data_sram_rdata;
+assign final_result = res_from_mem ? mem_result : alu_result_reg;
+
+assign {rf_we,dest,res_from_mem,pc}=upstream_input;
+assign stage_4_to_5={rf_we,dest,final_result,pc};
+
+endmodule
+
diff --git a/myCPU/mycpu_EX.v b/myCPU/mycpu_EX.v
new file mode 100644
index 0000000..168ec34
--- /dev/null
+++ b/myCPU/mycpu_EX.v
@@ -0,0 +1,65 @@
+module stage_3_EX (
+    input  wire clk,
+    input  wire reset,
+
+    // valid / allow
+    input  wire valid_2,
+    output wire allow_3,
+    output reg  valid_3,
+    input  wire allow_4,
+
+    input  wire [116:0] stage_2_to_3,
+    input  wire [31:0]  memory_write_data,
+    output wire [31:0] alu_result,
+    output wire [31:0] data_sram_wdata,
+    output wire [ 3:0] data_sram_we,
+    output wire data_sram_en,
+
+    output wire [38:0] stage_3_to_4
+);
+
+always @(posedge clk ) begin
+    if (reset) valid_3<=1'b1;
+    else valid_3<=valid_2;
+end
+
+assign allow_3=1'b1;
+
+reg [116:0] upstream_input;
+always @(posedge clk ) begin
+    if (reset) upstream_input<= 117'd0;
+    else if (valid_2 && allow_3) upstream_input <= stage_2_to_3;
+end
+
+wire rf_we;
+wire res_from_mem;
+wire [4:0] dest;
+wire [31:0] alu_src1;
+wire [31:0] alu_src2;
+wire [11:0] alu_op;
+wire mem_we;
+wire mem_en;
+wire [31:0] pc;
+
+assign {rf_we,dest,res_from_mem,alu_src1,alu_src2,alu_op,mem_we,mem_en,pc}=upstream_input;
+       // 1 + 5 +   1           + 32      + 32      + 12   +  1  +  1  +32
+
+reg [31:0] memory_write_data_reg;
+always @(posedge clk ) begin
+    if (reset) memory_write_data_reg<=32'b0;
+    else memory_write_data_reg<=memory_write_data;
+end
+assign data_sram_wdata=memory_write_data_reg;
+assign data_sram_we={4{mem_we}};
+assign data_sram_en=mem_en;
+
+alu u_alu(
+    .alu_op     (alu_op    ),
+    .alu_src1   (alu_src1  ),
+    .alu_src2   (alu_src2  ),
+    .alu_result (alu_result)
+    );
+
+assign stage_3_to_4={rf_we,dest,res_from_mem,pc};
+
+endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_ID.v b/myCPU/mycpu_ID.v
new file mode 100644
index 0000000..2d2e576
--- /dev/null
+++ b/myCPU/mycpu_ID.v
@@ -0,0 +1,271 @@
+module stage_2_ID (
+    input  wire clk,
+    input  wire reset,
+
+    // valid / allow
+    input  wire valid_1,
+    output wire allow_2,
+    output wire valid_2,
+    input  wire allow_3,
+
+    input  wire [63:0] stage_1_to_2,
+    output wire        br_taken,
+    output wire [31:0] br_target,
+
+    output wire [116:0] stage_2_to_3,
+    output wire [31:0]  memory_write_data,
+    
+    input  wire [31:0] rf_rdata1,
+    input  wire [31:0] rf_rdata2,
+    output wire [ 4:0] rf_raddr1,
+    output wire [ 4:0] rf_raddr2
+
+);
+
+//assign valid_2=1'b1;
+
+/*reg stage_2_blockflag; // Blocks Signal Flow from IF to ID if decoding a BRANCH-type instruction
+always @(posedge clk ) begin
+    if (reset) stage_2_blockflag <= 1'b0;
+    else if (br_inst) stage_2_blockflag <= ~stage_2_blockflag;
+end
+
+assign allow_2 = ~br_inst || (br_inst && stage_2_blockflag); // 当前解码 Branch时，忽略Branch紧接下来的一条指令，在下一拍再由Branch决定。
+*/
+
+assign allow_2=1'b1;
+
+reg next_valid; //如果当前指令是分支，那么下一拍invalid
+assign valid_2=next_valid;
+always @(posedge clk) begin
+    if (reset) next_valid<=1'b1;
+    else if (br_taken && next_valid) next_valid<=1'b0;
+    else if (~next_valid) next_valid<=valid_1;
+end
+
+
+reg [63:0] upstream_input;
+
+always @(posedge clk ) begin
+    if (reset) upstream_input <= 64'b0;
+    if (valid_1 && allow_3)
+        upstream_input <= stage_1_to_2;
+end
+
+wire [31:0] pc;
+wire [31:0] inst;
+
+assign {inst,pc}=upstream_input;
+
+wire        br_inst;
+
+wire [11:0] alu_op;
+wire        load_op;
+wire        src1_is_pc;
+wire        src2_is_imm;
+wire        res_from_mem;
+wire        dst_is_r1;
+wire        mem_we;
+wire        mem_en;
+wire        src_reg_is_rd;
+wire [4: 0] dest;
+wire [31:0] rj_value;
+wire [31:0] rkd_value;
+wire [31:0] imm;
+wire [31:0] br_offs;
+wire [31:0] jirl_offs;
+
+wire [ 5:0] op_31_26;
+wire [ 3:0] op_25_22;
+wire [ 1:0] op_21_20;
+wire [ 4:0] op_19_15;
+wire [ 4:0] rd;
+wire [ 4:0] rj;
+wire [ 4:0] rk;
+wire [11:0] i12;
+wire [19:0] i20;
+wire [15:0] i16;
+wire [25:0] i26;
+
+wire [63:0] op_31_26_d;
+wire [15:0] op_25_22_d;
+wire [ 3:0] op_21_20_d;
+wire [31:0] op_19_15_d;
+
+wire        inst_add_w;
+wire        inst_sub_w;
+wire        inst_slt;
+wire        inst_sltu;
+wire        inst_nor;
+wire        inst_and;
+wire        inst_or;
+wire        inst_xor;
+wire        inst_slli_w;
+wire        inst_srli_w;
+wire        inst_srai_w;
+wire        inst_addi_w;
+wire        inst_ld_w;
+wire        inst_st_w;
+wire        inst_jirl;
+wire        inst_b;
+wire        inst_bl;
+wire        inst_beq;
+wire        inst_bne;
+wire        inst_lu12i_w;
+
+wire        need_ui5;
+wire        need_si12;
+wire        need_si16;
+wire        need_si20;
+wire        need_si26;
+wire        src2_is_4;
+
+
+wire        rf_we   ;
+wire [ 4:0] rf_waddr;
+wire [31:0] rf_wdata;
+
+wire [31:0] alu_src1   ;
+wire [31:0] alu_src2   ;
+
+
+// Instruction to opcode
+assign op_31_26  = inst[31:26];
+assign op_25_22  = inst[25:22];
+assign op_21_20  = inst[21:20];
+assign op_19_15  = inst[19:15];
+
+// Instruction to GPR address
+assign rd   = inst[ 4: 0];
+assign rj   = inst[ 9: 5];
+assign rk   = inst[14:10];
+
+// Instruction to immediate number
+assign i12  = inst[21:10];
+assign i20  = inst[24: 5];
+assign i16  = inst[25:10];
+assign i26  = {inst[ 9: 0], inst[25:10]};
+
+// 分不同的opcode段进行译码，将其翻译为独立信号
+decoder_6_64 u_dec0(.in(op_31_26 ), .out(op_31_26_d ));
+decoder_4_16 u_dec1(.in(op_25_22 ), .out(op_25_22_d ));
+decoder_2_4  u_dec2(.in(op_21_20 ), .out(op_21_20_d ));
+decoder_5_32 u_dec3(.in(op_19_15 ), .out(op_19_15_d ));
+
+
+//每个指令单独翻译出一个信号，它们是one-hot的
+assign inst_add_w  = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h00];
+assign inst_sub_w  = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h02];
+assign inst_slt    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h04];
+assign inst_sltu   = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h05];
+assign inst_nor    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h08];
+assign inst_and    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h09];
+assign inst_or     = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h0a];
+assign inst_xor    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h0b];
+assign inst_slli_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h01];
+assign inst_srli_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h09];
+assign inst_srai_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h11];
+assign inst_addi_w = op_31_26_d[6'h00] & op_25_22_d[4'ha];
+assign inst_ld_w   = op_31_26_d[6'h0a] & op_25_22_d[4'h2];
+assign inst_st_w   = op_31_26_d[6'h0a] & op_25_22_d[4'h6];
+assign inst_jirl   = op_31_26_d[6'h13];
+assign inst_b      = op_31_26_d[6'h14];
+assign inst_bl     = op_31_26_d[6'h15];
+assign inst_beq    = op_31_26_d[6'h16];
+assign inst_bne    = op_31_26_d[6'h17];
+assign inst_lu12i_w= op_31_26_d[6'h05] & ~inst[25];
+
+
+// 根据指令，生成aluop
+assign alu_op[ 0] = inst_add_w | inst_addi_w | inst_ld_w | inst_st_w
+                    | inst_jirl | inst_bl;
+assign alu_op[ 1] = inst_sub_w;
+assign alu_op[ 2] = inst_slt;
+assign alu_op[ 3] = inst_sltu;
+assign alu_op[ 4] = inst_and;
+assign alu_op[ 5] = inst_nor;
+assign alu_op[ 6] = inst_or;
+assign alu_op[ 7] = inst_xor;
+assign alu_op[ 8] = inst_slli_w;
+assign alu_op[ 9] = inst_srli_w;
+assign alu_op[10] = inst_srai_w;
+assign alu_op[11] = inst_lu12i_w;
+
+// 需要immediate
+assign need_ui5   =  inst_slli_w | inst_srli_w | inst_srai_w;
+assign need_si12  =  inst_addi_w | inst_ld_w | inst_st_w;
+assign need_si16  =  inst_jirl | inst_beq | inst_bne;
+assign need_si20  =  inst_lu12i_w;
+assign need_si26  =  inst_b | inst_bl;
+assign src2_is_4  =  inst_jirl | inst_bl;
+
+
+// 数据选择：生成立即数
+assign imm = src2_is_4 ? 32'h4                      :
+             need_si20 ? {i20[19:0], 12'b0}         :
+/*need_ui5 || need_si12*/{{20{i12[11]}}, i12[11:0]} ;
+
+//数据选择：branch相关的offset
+assign br_offs = need_si26 ? {{ 4{i26[25]}}, i26[25:0], 2'b0} :
+                             {{14{i16[15]}}, i16[15:0], 2'b0} ;
+
+assign jirl_offs = {{14{i16[15]}}, i16[15:0], 2'b0};
+
+
+// SRC相关的控制信号
+assign src_reg_is_rd = inst_beq | inst_bne | inst_st_w;
+
+assign src1_is_pc    = inst_jirl | inst_bl;
+
+assign src2_is_imm   = inst_slli_w |
+                       inst_srli_w |
+                       inst_srai_w |
+                       inst_addi_w |
+                       inst_ld_w   |
+                       inst_st_w   |
+                       inst_lu12i_w|
+                       inst_jirl   |
+                       inst_bl     ;
+
+
+//GPR相关的控制信号
+assign res_from_mem  = inst_ld_w;
+assign dst_is_r1     = inst_bl;
+        // GENERAL PURPOSE REGISTER WRITE-ENABLE
+assign rf_we         = ~inst_st_w & ~inst_beq & ~inst_bne & ~inst_b; //& ~inst_bl; 
+assign mem_we        = inst_st_w;
+assign mem_en    = (res_from_mem || mem_we);
+assign dest          = dst_is_r1 ? 5'd1 : rd;
+
+
+// GPR
+assign rf_raddr1 = rj;
+assign rf_raddr2 = src_reg_is_rd ? rd :rk;
+assign rj_value  = rf_rdata1;
+assign rkd_value = rf_rdata2;
+
+
+assign rj_eq_rd = (rj_value == rkd_value);
+
+// BRANCH
+
+assign br_taken = (   inst_beq  &&  rj_eq_rd
+                   || inst_bne  && !rj_eq_rd
+                   || inst_jirl
+                   || inst_bl
+                   || inst_b
+                  )&& valid_2;// && ds_valid; 手动删除
+assign br_inst = inst_beq || inst_bne || inst_bl || inst_b || inst_jirl;
+assign br_target = (inst_beq || inst_bne || inst_bl || inst_b) ? (pc + br_offs) :
+                                                   /*inst_jirl*/ (rj_value + jirl_offs);
+
+
+//ALU
+assign alu_src1 = src1_is_pc  ? pc[31:0] : rj_value;
+assign alu_src2 = src2_is_imm ? imm : rkd_value;
+
+assign stage_2_to_3={rf_we,dest,res_from_mem,alu_src1,alu_src2,alu_op,mem_we,mem_en,pc};
+                    // 1 +  5  +  1             +32      + 32      + 12   +  1  +  1    +32
+assign memory_write_data=rkd_value;
+
+endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_IF.v b/myCPU/mycpu_IF.v
new file mode 100644
index 0000000..cd1a3ab
--- /dev/null
+++ b/myCPU/mycpu_IF.v
@@ -0,0 +1,52 @@
+module stage_1_IF(
+    input wire clk,
+    input wire reset,
+
+    // valid / allow
+    output wire valid_1,
+    input  wire allow_2,
+    
+    input  wire        br_taken,
+    input  wire [31:0] br_target,
+
+    output wire [63:0]  stage_1_to_2,
+    // output wire sram
+    output wire        inst_sram_en,
+    output wire [ 3:0] inst_sram_we,
+    output wire [31:0] inst_sram_addr,
+    output wire [31:0] inst_sram_wdata,
+    input  wire [31:0] inst_sram_rdata
+);
+
+assign valid_1 = ~reset;
+
+wire [31:0] ds_pc;
+wire [31:0] seq_pc;
+wire [31:0] nextpc;
+wire [31:0] inst;
+reg  [31:0] pc;
+
+// PC
+assign ds_pc        = pc;
+assign seq_pc       = ds_pc + 3'h4;
+assign nextpc       = br_taken ? br_target : seq_pc;
+
+always @(posedge clk) begin
+    if (reset) begin
+        pc <= 32'h1c000000; 
+        //pc <= 32'h1bff_fffc;
+    end
+    else begin
+        pc <= nextpc;
+    end
+end
+
+assign inst_sram_we    = 1'b0;
+assign inst_sram_en    = 1'b1;
+assign inst_sram_addr  = nextpc; //pc; changed for pipeline
+assign inst_sram_wdata = 32'b0;
+assign inst            = inst_sram_rdata;
+
+assign stage_1_to_2 = {inst,pc};
+
+endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_WB.v b/myCPU/mycpu_WB.v
new file mode 100644
index 0000000..bc37772
--- /dev/null
+++ b/myCPU/mycpu_WB.v
@@ -0,0 +1,46 @@
+module stage_5_WB (
+    input  wire clk,
+    input  wire reset,
+
+    // valid / allow
+    input  wire valid_4,
+    output wire allow_5,
+
+    input  wire [69:0] stage_4_to_5,
+
+    output wire rf_we,
+    output wire [ 4:0] rf_waddr,    
+    output wire [31:0] rf_wdata,
+    output wire [31:0] debug_wb_pc
+);
+
+reg valid_4_reg;
+always @(posedge clk ) begin
+    if (reset) valid_4_reg<=1'b1;
+    else valid_4_reg<=valid_4;
+end
+
+assign allow_5=1'b1;
+
+wire [31:0] pc;
+assign debug_wb_pc=pc;
+
+wire [4:0] dest;
+wire [31:0] final_result;
+
+
+reg [69:0] upstream_input;
+
+always @(posedge clk ) begin
+    if (reset) upstream_input<=70'b0;
+    else if (valid_4 && allow_5) upstream_input<=stage_4_to_5;
+end
+
+wire rf_we_internal;
+assign {rf_we_internal,dest,final_result,pc}=upstream_input;
+assign rf_we=rf_we_internal&valid_4_reg;
+
+assign rf_waddr=dest;
+assign rf_wdata=final_result;
+
+endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_top.v b/myCPU/mycpu_top.v
index e1f5eea..7e1de83 100644
--- a/myCPU/mycpu_top.v
+++ b/myCPU/mycpu_top.v
@@ -2,12 +2,14 @@ module mycpu_top(
     input  wire        clk,
     input  wire        resetn,
     // inst sram interface
-    output wire        inst_sram_we,
+    output wire        inst_sram_en,
+    output wire [ 3:0] inst_sram_we,
     output wire [31:0] inst_sram_addr,
     output wire [31:0] inst_sram_wdata,
     input  wire [31:0] inst_sram_rdata,
     // data sram interface
-    output wire        data_sram_we,
+    output wire        data_sram_en,
+    output wire [ 3:0] data_sram_we,
     output wire [31:0] data_sram_addr,
     output wire [31:0] data_sram_wdata,
     input  wire [31:0] data_sram_rdata,
@@ -17,226 +19,119 @@ module mycpu_top(
     output wire [ 4:0] debug_wb_rf_wnum,
     output wire [31:0] debug_wb_rf_wdata
 );
-//reg         reset;
-//always @(posedge clk) reset <= ~resetn;
 
 wire reset;
 assign reset = ~resetn;
+// VALID & ALLOW GENERATION
+wire valid_1; // the valid signal given by stage 1
+wire valid_2; // beq bne b 执行到此为止
+wire valid_3; 
+wire valid_4;
+//wire valid_5;
+
+//wire allow_1;
+wire allow_2; // branch 类 指令需要阻塞
+wire allow_3;
+wire allow_4;
+wire allow_5;
 
-wire [31:0] ds_pc;
-wire [31:0] seq_pc;
-wire [31:0] nextpc;
 wire        br_taken;
 wire [31:0] br_target;
-wire [31:0] inst;
-reg  [31:0] pc;
 
-wire [11:0] alu_op;
-wire        load_op;
-wire        src1_is_pc;
-wire        src2_is_imm;
-wire        res_from_mem;
-wire        dst_is_r1;
-wire        gr_we;
-wire        mem_we;
-wire        src_reg_is_rd;
-wire [4: 0] dest;
-wire [31:0] rj_value;
-wire [31:0] rkd_value;
-wire [31:0] imm;
-wire [31:0] br_offs;
-wire [31:0] jirl_offs;
-
-wire [ 5:0] op_31_26;
-wire [ 3:0] op_25_22;
-wire [ 1:0] op_21_20;
-wire [ 4:0] op_19_15;
-wire [ 4:0] rd;
-wire [ 4:0] rj;
-wire [ 4:0] rk;
-wire [11:0] i12;
-wire [19:0] i20;
-wire [15:0] i16;
-wire [25:0] i26;
-
-wire [63:0] op_31_26_d;
-wire [15:0] op_25_22_d;
-wire [ 3:0] op_21_20_d;
-wire [31:0] op_19_15_d;
-
-wire        inst_add_w;
-wire        inst_sub_w;
-wire        inst_slt;
-wire        inst_sltu;
-wire        inst_nor;
-wire        inst_and;
-wire        inst_or;
-wire        inst_xor;
-wire        inst_slli_w;
-wire        inst_srli_w;
-wire        inst_srai_w;
-wire        inst_addi_w;
-wire        inst_ld_w;
-wire        inst_st_w;
-wire        inst_jirl;
-wire        inst_b;
-wire        inst_bl;
-wire        inst_beq;
-wire        inst_bne;
-wire        inst_lu12i_w;
-
-wire        need_ui5;
-wire        need_si12;
-wire        need_si16;
-wire        need_si20;
-wire        need_si26;
-wire        src2_is_4;
-
-wire [ 4:0] rf_raddr1;
-wire [31:0] rf_rdata1;
-wire [ 4:0] rf_raddr2;
-wire [31:0] rf_rdata2;
-wire        rf_we   ;
 wire [ 4:0] rf_waddr;
 wire [31:0] rf_wdata;
 
-wire [31:0] alu_src1   ;
-wire [31:0] alu_src2   ;
-wire [31:0] alu_result ;
-
-wire [31:0] mem_result;
-wire [31:0] final_result;
-
-// PC
-assign ds_pc        = pc;
-assign seq_pc       = ds_pc + 3'h4;
-assign nextpc       = br_taken ? br_target : seq_pc;
-
-always @(posedge clk) begin
-    if (reset) begin
-        pc <= 32'h1c000000; 
-    end
-    else begin
-        pc <= nextpc;
-    end
-end
-
-assign inst_sram_we    = 1'b0;
-assign inst_sram_addr  = pc;
-assign inst_sram_wdata = 32'b0;
-assign inst            = inst_sram_rdata;
-
-// Instruction to opcode
-assign op_31_26  = inst[31:26];
-assign op_25_22  = inst[25:22];
-assign op_21_20  = inst[21:20];
-assign op_19_15  = inst[19:15];
-
-// Instruction to GPR address
-assign rd   = inst[ 4: 0];
-assign rj   = inst[ 9: 5];
-assign rk   = inst[14:10];
-
-// Instruction to immediate number
-assign i12  = inst[21:10];
-assign i20  = inst[24: 5];
-assign i16  = inst[25:10];
-assign i26  = {inst[ 9: 0], inst[25:10]};
-
-// 分不同的opcode段进行译码，将其翻译为独立信号
-decoder_6_64 u_dec0(.in(op_31_26 ), .out(op_31_26_d ));
-decoder_4_16 u_dec1(.in(op_25_22 ), .out(op_25_22_d ));
-decoder_2_4  u_dec2(.in(op_21_20 ), .out(op_21_20_d ));
-decoder_5_32 u_dec3(.in(op_19_15 ), .out(op_19_15_d ));
-
-
-//每个指令单独翻译出一个信号，它们是one-hot的
-assign inst_add_w  = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h00];
-assign inst_sub_w  = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h02];
-assign inst_slt    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h04];
-assign inst_sltu   = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h05];
-assign inst_nor    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h08];
-assign inst_and    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h09];
-assign inst_or     = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h0a];
-assign inst_xor    = op_31_26_d[6'h00] & op_25_22_d[4'h0] & op_21_20_d[2'h1] & op_19_15_d[5'h0b];
-assign inst_slli_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h01];
-assign inst_srli_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h09];
-assign inst_srai_w = op_31_26_d[6'h00] & op_25_22_d[4'h1] & op_21_20_d[2'h0] & op_19_15_d[5'h11];
-assign inst_addi_w = op_31_26_d[6'h00] & op_25_22_d[4'ha];
-assign inst_ld_w   = op_31_26_d[6'h0a] & op_25_22_d[4'h2];
-assign inst_st_w   = op_31_26_d[6'h0a] & op_25_22_d[4'h6];
-assign inst_jirl   = op_31_26_d[6'h13];
-assign inst_b      = op_31_26_d[6'h14];
-assign inst_bl     = op_31_26_d[6'h15];
-assign inst_beq    = op_31_26_d[6'h16];
-assign inst_bne    = op_31_26_d[6'h17];
-assign inst_lu12i_w= op_31_26_d[6'h05] & ~inst[25];
-
-
-// 根据指令，生成aluop
-assign alu_op[ 0] = inst_add_w | inst_addi_w | inst_ld_w | inst_st_w
-                    | inst_jirl | inst_bl;
-assign alu_op[ 1] = inst_sub_w;
-assign alu_op[ 2] = inst_slt;
-assign alu_op[ 3] = inst_sltu;
-assign alu_op[ 4] = inst_and;
-assign alu_op[ 5] = inst_nor;
-assign alu_op[ 6] = inst_or;
-assign alu_op[ 7] = inst_xor;
-assign alu_op[ 8] = inst_slli_w;
-assign alu_op[ 9] = inst_srli_w;
-assign alu_op[10] = inst_srai_w;
-assign alu_op[11] = inst_lu12i_w;
-
-// 需要immediate
-assign need_ui5   =  inst_slli_w | inst_srli_w | inst_srai_w;
-assign need_si12  =  inst_addi_w | inst_ld_w | inst_st_w;
-assign need_si16  =  inst_jirl | inst_beq | inst_bne;
-assign need_si20  =  inst_lu12i_w;
-assign need_si26  =  inst_b | inst_bl;
-assign src2_is_4  =  inst_jirl | inst_bl;
-
-
-// 数据选择：生成立即数
-assign imm = src2_is_4 ? 32'h4                      :
-             need_si20 ? {i20[19:0], 12'b0}         :
-/*need_ui5 || need_si12*/{{20{i12[11]}}, i12[11:0]} ;
-
-//数据选择：branch相关的offset
-assign br_offs = need_si26 ? {{ 4{i26[25]}}, i26[25:0], 2'b0} :
-                             {{14{i16[15]}}, i16[15:0], 2'b0} ;
-
-assign jirl_offs = {{14{i16[15]}}, i16[15:0], 2'b0};
-
+wire rf_we;
+
+wire [63:0]  stage_1_to_2;
+stage_1_IF instantiation_IF  (
+    .clk (clk),
+    .valid_1 (valid_1),
+    .allow_2 (allow_2),
+    .reset (reset),
+    .br_taken (br_taken),
+    .br_target (br_target),
+    .stage_1_to_2 (stage_1_to_2),
+    .inst_sram_en (inst_sram_en),
+    .inst_sram_we (inst_sram_we),
+    .inst_sram_addr (inst_sram_addr),
+    .inst_sram_wdata (inst_sram_wdata),
+    .inst_sram_rdata (inst_sram_rdata)
+);
 
-// SRC相关的控制信号
-assign src_reg_is_rd = inst_beq | inst_bne | inst_st_w;
 
-assign src1_is_pc    = inst_jirl | inst_bl;
+wire [31:0] rf_rdata1;
+wire [31:0] rf_rdata2;
+wire [ 4:0] rf_raddr1;
+wire [ 4:0] rf_raddr2;
 
-assign src2_is_imm   = inst_slli_w |
-                       inst_srli_w |
-                       inst_srai_w |
-                       inst_addi_w |
-                       inst_ld_w   |
-                       inst_st_w   |
-                       inst_lu12i_w|
-                       inst_jirl   |
-                       inst_bl     ;
+wire [116:0] stage_2_to_3;
+wire [31:0]  memory_write_data;
+stage_2_ID instantiation_ID  (
+    .clk (clk),
+    .reset (reset),
+    .valid_1 (valid_1),
+    .valid_2 (valid_2),
+    .allow_2 (allow_2),
+    .allow_3 (allow_3),
+    .stage_1_to_2 (stage_1_to_2),
+    .br_taken (br_taken),
+    .br_target (br_target),
+    .stage_2_to_3 (stage_2_to_3),
+    .memory_write_data (memory_write_data),
+    .rf_raddr1 (rf_raddr1),
+    .rf_raddr2 (rf_raddr2),
+    .rf_rdata1 (rf_rdata1),
+    .rf_rdata2 (rf_rdata2)
+);
 
+wire [38:0] stage_3_to_4;
+wire [31:0] alu_result;
+
+ stage_3_EX instantiation_EX(
+    .clk (clk),
+    .reset (reset),
+    .valid_2 (valid_2),
+    .valid_3 (valid_3),
+    .allow_3 (allow_3),
+    .allow_4 (allow_4),
+    .stage_2_to_3 (stage_2_to_3),
+    .memory_write_data (memory_write_data),
+    .alu_result (alu_result),
+    .data_sram_wdata (data_sram_wdata),
+    .data_sram_we (data_sram_we),
+    .data_sram_en (data_sram_en),
+    .stage_3_to_4 (stage_3_to_4)
+);
 
-//GPR相关的控制信号
-assign res_from_mem  = inst_ld_w;
-assign dst_is_r1     = inst_bl;
-        // GENERAL PURPOSE REGISTER WRITE-ENABLE
-assign gr_we         = ~inst_st_w & ~inst_beq & ~inst_bne & ~inst_b; //& ~inst_bl; 
-assign mem_we        = inst_st_w;
-assign dest          = dst_is_r1 ? 5'd1 : rd;
+assign data_sram_addr=alu_result;
+
+wire [69:0] stage_4_to_5;
+ stage_4_AM instantiation_AM(
+    .clk (clk),
+    .reset (reset),
+    .valid_3 (valid_3),
+    .valid_4 (valid_4),
+    .allow_4 (allow_4),
+    .allow_5 (allow_5),
+    .stage_3_to_4 (stage_3_to_4),
+    .alu_result (alu_result),
+    .data_sram_rdata (data_sram_rdata),
+    .stage_4_to_5 (stage_4_to_5)
+);
 
+ stage_5_WB instantiation_WB(
+    .clk (clk),
+    .reset (reset),
+    .valid_4 (valid_4),
+    .allow_5 (allow_5),
+    .stage_4_to_5 (stage_4_to_5),
+    .rf_we (rf_we),
+    .rf_waddr (rf_waddr),
+    .rf_wdata (rf_wdata),
+    .debug_wb_pc (debug_wb_pc)
+);
 
-// GPR
-assign rf_raddr1 = rj;
-assign rf_raddr2 = src_reg_is_rd ? rd :rk;
 regfile u_regfile(
     .clk    (clk      ),
     .raddr1 (rf_raddr1),
@@ -248,49 +143,8 @@ regfile u_regfile(
     .wdata  (rf_wdata )
     );
 
-assign rj_value  = rf_rdata1;
-assign rkd_value = rf_rdata2;
-
-assign rj_eq_rd = (rj_value == rkd_value);
-
-// BRANCH
-assign br_taken = (   inst_beq  &&  rj_eq_rd
-                   || inst_bne  && !rj_eq_rd
-                   || inst_jirl
-                   || inst_bl
-                   || inst_b
-                  );// && ds_valid; 手动删除
-assign br_target = (inst_beq || inst_bne || inst_bl || inst_b) ? (ds_pc + br_offs) :
-                                                   /*inst_jirl*/ (rj_value + jirl_offs);
-
-
-//ALU
-assign alu_src1 = src1_is_pc  ? pc[31:0] : rj_value;
-assign alu_src2 = src2_is_imm ? imm : rkd_value;
-
-alu u_alu(
-    .alu_op     (alu_op    ),
-    .alu_src1   (alu_src1  ),
-    .alu_src2   (alu_src2  ),
-    .alu_result (alu_result)
-    );
-
-assign data_sram_en    = (res_from_mem || mem_we);// && valid; 手动删除
-assign data_sram_we    = mem_we;
-assign data_sram_addr  = alu_result;
-assign data_sram_wdata = rkd_value;
-
-assign mem_result   = data_sram_rdata;
-assign final_result = res_from_mem ? mem_result : alu_result;
-
-assign rf_we    = gr_we;
-assign rf_waddr = dest;
-assign rf_wdata = final_result;
-
-// debug info generate
-assign debug_wb_pc       = pc;
 assign debug_wb_rf_we   = {4{rf_we}};
-assign debug_wb_rf_wnum  = dest;
-assign debug_wb_rf_wdata = final_result;
+assign debug_wb_rf_wnum  = rf_waddr;
+assign debug_wb_rf_wdata = rf_wdata;
 
-endmodule
+endmodule
\ No newline at end of file
-- 
2.35.1.windows.1

